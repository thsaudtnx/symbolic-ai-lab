{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7527,"status":"ok","timestamp":1732184813389,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"},"user_tz":0},"id":"4EKoJWOd4mNQ","outputId":"dfa3831d-cae7-4f2f-b75a-db21d7b42394"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ortools in /usr/local/lib/python3.10/dist-packages (9.11.4210)\n","Requirement already satisfied: absl-py>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.1.0)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.10/dist-packages (from ortools) (1.26.4)\n","Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (2.2.2)\n","Requirement already satisfied: protobuf<5.27,>=5.26.1 in /usr/local/lib/python3.10/dist-packages (from ortools) (5.26.1)\n","Requirement already satisfied: immutabledict>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from ortools) (4.2.1)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->ortools) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->ortools) (1.16.0)\n"]}],"source":["!pip install ortools"]},{"cell_type":"markdown","metadata":{"id":"05ccQOEyyWSg"},"source":["# Lab 6: Using CSP in practice\n","\n","As you may remember from the lectures, CSP is very flexible in terms of defining constraints; any relation between the scope variables can be used as a constraint.  We do not have to use any restricted language, such as propositional logic or FOL, to describe the constraint; any constraint is a CSP constraint as long as its logic depends only on the scope variables and it can be described formally and deterministically.\n","\n","OR-Tools provides quite a few functions to define a constraint:\n","* You can use the [`Add`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#add) function passing some equality or inequality into it; e.g., `model.Add(x + 2 * y > 5)`.\n","\n","* You can use the [`AddAllDifferent`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addalldifferent) function to request that all the scope variables have different values; e.g. `model.AddAllDifferent([x, y])`.\n","\n","* Functions [`AddImplication`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addimplication), [`AddBoolOr`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addboolor), [`AddBoolAnd`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addbooland) and [`AddBoolXOr`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addboolxor) create constraints connecting several Boolean variables.\n","\n","* Functions such as [`AddDivisionEquality`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#adddivisionequality), [`AddMaxEquality`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addmaxequality) and [`AddModuloEquality`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addmoduloequality) provide access to certain arithmetic operations; you have seen an example of using `AddMaxEquality` in the previous lab.\n","\n","* There are several other functions designed to create specialised constraints, e.g. [`AddCircuit`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addcircuit) and [`AddReservoirConstraintWithActive`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addreservoirconstraint) which are not used that commonly.\n","\n","* You can use the [`AddAllowedAssignments`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addallowedassignments) and [`AddForbiddenAssignments`](https://developers.google.com/optimization/reference/python/sat/python/cp_model#addforbiddenassignments) functions to explicitly list all the allowed/forbidden assignments&nbsp;&ndash; effectively using the truth table approach to defining a constraint.  While you can use this method to define any CSP constraint as long as your variable domains are finite, this is usually a _very_ inefficient approach.\n","\n","\n","All of these approaches (except for the last one, which should not normally be used) are restricted to very specific types of constraints.\n","In this lab, you will learn how to encode constraints that cannot be created directly using the above functions.\n","\n","**Note** that the exercises in this worksheet include CSP formulations, however such formulations would not be sufficient in the Project 2 report; they are mathematically precise but not close enough to the real implementation.  For example, OR-Tools does not support a constraint testing if one set is a subset of another set.  Your Project 2 formulation must be detailed enough for the reader to understand how it can be encoded in OR-Tools.\n"]},{"cell_type":"markdown","metadata":{"id":"Lzx7O1eJ04Pm"},"source":["## Exercise 1\n","\n","Encode in Python/OR-Tools the following CSP:\n","$$\n","\\begin{align}\n","& x + y < 5 \\quad \\text{or} \\quad z - x > 3, \\\\\n","& 0 \\le x, y, z \\le 10.\n","\\end{align}\n","$$\n","\n","**Hint:** introduce an auxiliary Boolean variable.  Depending on the value of that new variable, either the first or the second part of the constraint will be enforced.  Use `OnlyEnforceIf` to conditionally enforce a constraint."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":240,"status":"ok","timestamp":1732181443286,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"},"user_tz":0},"id":"dggHgDP9yUls","outputId":"37ac5000-8cbf-4909-fefa-e4b6aabaef17"},"outputs":[{"output_type":"stream","name":"stdout","text":["condition = False\n","x = 0\n","y = 0\n","z = 4\n"]}],"source":["# Your solution to Exercise 1\n","\n","from ortools.sat.python import cp_model\n","\n","def solve_csp():\n","    model = cp_model.CpModel()\n","\n","    # Define integer variables with bounds 0 <= x, y, z <= 10\n","    x = model.NewIntVar(0, 10, 'x')\n","    y = model.NewIntVar(0, 10, 'y')\n","    z = model.NewIntVar(0, 10, 'z')\n","\n","    # Define a Boolean variable to control which constraint is enforced\n","    condition = model.NewBoolVar('condition')\n","\n","    # Add conditional constraints using OnlyEnforceIf\n","    model.Add(x + y < 5).OnlyEnforceIf(condition)\n","    model.Add(z - x > 3).OnlyEnforceIf(condition.Not())\n","\n","    # Create a solver and solve the model\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    # Print the solution if found\n","    if status in [cp_model.FEASIBLE, cp_model.OPTIMAL]:\n","        print(f\"condition = {bool(solver.Value(condition))}\")\n","        print(f\"x = {solver.Value(x)}\")\n","        print(f\"y = {solver.Value(y)}\")\n","        print(f\"z = {solver.Value(z)}\")\n","    else:\n","        print(\"unsat\")\n","\n","# Run the function\n","solve_csp()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aVH7uQ4V1g6F"},"source":["## Exercise 2\n","\n","Generalise the above approach to encode the following CSP:\n","$$\n","\\begin{align}\n","& \\exists i \\in N \\text{ such that } x_i = 3, \\\\\n","& x_i \\in N \\qquad \\forall i \\in  N,\n","\\end{align}\n","$$\n","where $N = \\{ 1, 2, \\ldots, 10 \\}$.\n","\n","**Hint:** think of the way to expand the existential quantifier; what does the first constraint really mean?\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":232,"status":"ok","timestamp":1732181625580,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"},"user_tz":0},"id":"xyzSO_AC2bxB","outputId":"2a6d85d5-2815-418e-fffe-902876d27f12"},"outputs":[{"output_type":"stream","name":"stdout","text":["x[1] = 3\n","x[2] = 1\n","x[3] = 1\n","x[4] = 1\n","x[5] = 1\n","x[6] = 1\n","x[7] = 1\n","x[8] = 1\n","x[9] = 1\n","x[10] = 1\n"]}],"source":["# Your solution to Exercise 2\n","\n","from ortools.sat.python import cp_model\n","\n","def solve_generalized_csp():\n","\n","    model = cp_model.CpModel()\n","\n","    n = 10  # Size of N\n","    x = [model.NewIntVar(1, n, f'x_{i}') for i in range(n)]\n","\n","    is_equal_to_three = []\n","\n","    for i in range(n):\n","        b = model.NewBoolVar(f'is_equal_to_three_{i}')\n","        model.Add(x[i] == 3).OnlyEnforceIf(b)\n","        is_equal_to_three.append(b)\n","\n","    # Ensure at least one x_i is equal to 3 (exists constraint)\n","    model.AddBoolOr(is_equal_to_three)\n","\n","    # Create a solver and solve the model\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    # Print the solution if found\n","    if status in [cp_model.FEASIBLE, cp_model.OPTIMAL]:\n","        for i in range(n):\n","            print(f'x[{i+1}] = {solver.Value(x[i])}')\n","    else:\n","        print(\"unsat\")\n","\n","# Run the function\n","solve_generalized_csp()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"8UGGTeSB1gyt"},"source":["## Exercise 3\n","\n","Further generalise the above approach to encode the following CSP:\n","$$\n","\\begin{align}\n","& \\exists M \\subset N \\text{ such that } |M| = 5 \\land \\big(\\forall i \\in M \\, . \\, (x_i = 3) \\big), \\\\\n","& x_i \\in N \\qquad \\forall i \\in  N,\n","\\end{align}\n","$$\n","where $N = \\{ 1, 2, \\ldots, 10 \\}$.\n","\n","**Hint:** similarly to the previous question, try to interpret the meaning of the constraint; how can you express it in English?\n","It can actually be explained in a short English sentence.\n","Note that you can count the number of Boolean CSP variables set to True by using the Python `sum` function.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":377,"status":"ok","timestamp":1732107867876,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"},"user_tz":0},"id":"f55pVv2y1gL7","outputId":"c3c20db6-9cab-4cc2-cad0-4cdc9bb3101f"},"outputs":[{"name":"stdout","output_type":"stream","text":["x[1] = 1\n","x[2] = 1\n","x[3] = 1\n","x[4] = 1\n","x[5] = 1\n","x[6] = 3\n","x[7] = 3\n","x[8] = 3\n","x[9] = 3\n","x[10] = 3\n"]}],"source":["# Your solution to Exercise 3\n","\n","from ortools.sat.python import cp_model\n","\n","def solve_subset_csp():\n","\n","    model = cp_model.CpModel()\n","\n","    n = 10  # Size of N\n","    x = [model.NewIntVar(1, n, f'x_{i}') for i in range(n)]  # Define x_i variables in range 1 to 10\n","\n","    # Boolean variables to track whether x_i equals 3\n","    is_equal_to_three = [model.NewBoolVar(f'is_equal_to_three_{i}') for i in range(n)]\n","\n","    # Add constraints that link the Boolean variables with the condition x_i = 3\n","    for i in range(n):\n","        model.Add(x[i] == 3).OnlyEnforceIf(is_equal_to_three[i])\n","        model.Add(x[i] != 3).OnlyEnforceIf(is_equal_to_three[i].Not())\n","\n","    # Ensure exactly 5 variables are equal to 3\n","    model.Add(sum(is_equal_to_three) == 5)\n","\n","    # Create a solver and solve the model\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    # Print the solution if found\n","    if status in [cp_model.FEASIBLE, cp_model.OPTIMAL]:\n","        for i in range(n):\n","            print(f'x[{i+1}] = {solver.Value(x[i])}')\n","    else:\n","        print(\"unsat\")\n","\n","# Run the function\n","solve_subset_csp()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HPh0dlM83Y3F"},"source":["## Exercise 4\n","\n","Encode a slight modification of the above problem:\n","$$\n","\\begin{align}\n","& |\\{ i : x_i = 3 \\}| = 5, \\\\\n","& x_i \\in N \\qquad \\forall i \\in N,\n","\\end{align}\n","$$\n","where $N = \\{ 1, 2, \\ldots, 10 \\}$.\n","\n","Observe that we want _exactly_ five of the constraints $x_i = 3$ to be satisfied.\n","\n","Test your encoding by replacing the second line with\n","$$\n","x_i \\in \\{ 3 \\} \\qquad \\forall i \\in N.\n","$$\n","If your encoding is correct, the problem should become unsatisfiable."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":253,"status":"ok","timestamp":1732181752656,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"},"user_tz":0},"id":"750YgiSv4GOY","outputId":"761ed291-91d5-45bb-8b6c-66022d686700"},"outputs":[{"output_type":"stream","name":"stdout","text":["unsat\n"]}],"source":["# Your solution to Exercise 4\n","\n","from ortools.sat.python import cp_model\n","\n","def solve_exact_five_csp():\n","    model = cp_model.CpModel()\n","\n","    n = 10  # Size of N\n","    x = [model.NewIntVar(3, 3, f'x_{i}') for i in range(n)]  # Define x_i variables in range 1 to 10\n","\n","    # Boolean variables to track whether x_i equals 3\n","    is_equal_to_three = [model.NewBoolVar(f'is_equal_to_three_{i}') for i in range(n)]\n","\n","    # Add constraints that link the Boolean variables with the condition x_i = 3\n","    for i in range(n):\n","        model.Add(x[i] == 3).OnlyEnforceIf(is_equal_to_three[i])\n","        model.Add(x[i] != 3).OnlyEnforceIf(is_equal_to_three[i].Not())\n","\n","    # Ensure exactly 5 variables are equal to 3\n","    model.Add(sum(is_equal_to_three) == 5)\n","\n","    # Create a solver and solve the model\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    # Print the solution if found\n","    if status in [cp_model.FEASIBLE, cp_model.OPTIMAL]:\n","        for i in range(n):\n","            print(f'x[{i+1}] = {solver.Value(x[i])}')\n","    else:\n","        print(\"unsat\")\n","\n","# Test the function with the original constraints\n","solve_exact_five_csp()\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Lis_qY6BNts8"},"source":["## Exercise 5\n","\n","This is the last lab exercise in this module, and it is advanced.  It is likely to take you some time to do but it will help you understand better the performance of solvers.\n","\n","----\n","\n","Recall the graph colouring problem from the lecture:\n","\n","**Definition.**  Given an undirected graph $G = (V, E)$ and an integer $k$, find a proper vertex $k$-colouring of $G$, i.e. an assignment of $k$ colours to vertices $V$ such that no two adjacent nodes have the same colour.\n","\n","You can find a few examples of graph colouring in [this Wikipedia article](https://en.wikipedia.org/wiki/Graph_coloring).\n","\n","We produced the following formulation in the lecture:\n","$$\n","\\begin{split}\n","& c_v \\neq c_u & \\qquad \\forall (v, u) \\in E, & \\qquad (1)\\\\\n","& c_v \\in \\{ 1, 2, \\ldots, k \\} & \\qquad \\forall v \\in V. & \\qquad (2)\n","\\end{split}\n","$$\n","Here $n$ is the number of nodes, $V = \\{ 1, 2, \\ldots, n \\}$ is the set of nodes, $E$ is the set of graph edges, and each edge is a pair of nodes.\n","\n","Our solution representation is the set of variables $c_v$, $v \\in V$.  Specifically, the value of variable $c_v$ is the colour assigned to node $v$.\n","\n","In this exercise, you will:\n","1. Build a solver (based on OR-Tools) for graph colouring.\n","2. Build a generator of random graphs.\n","3. Measure the performance of your solver on a range of graphs.\n","4. Measure the probability of a random graph with a certain number of nodes and edges being satisfiable.\n","5. Link the above probability to the running time of the solver.\n","\n","### Building a solver\n","\n","Implement formulation (1)&ndash;(2) in OR-Tools.  Place it in a function that takes the graph and the value of $k$ as parameters, and returns a Boolean: `True` if the graph colouring problem is satisfiable and `False` otherwise.\n","\n","**Hint:**  To represent a graph, all you need is the number of nodes $n$ and the list of edges.  For an edge, you can use Python tuple, e.g. `(4, 8)` would represent an edge between nodes 4 and 8.\n","\n","### Building a random graph generator\n","\n","Implement a Python function that takes two parameters: the number of nodes $n$ and the number of edges $m$.  The function should produce a random graph with the given number of nodes and the given number of _distinct_ edges.\n","\n","### Measuring performance and satisfiability probability\n","\n","The performance of a solver greatly depends on the specific graph (and the value of $k$); some instances happen to be easy while others happen to be hard.  To understand how the solver behaves on graphs of a certain size and certain values of $k$, we need to run multiple experiments and measure the average running time.  Implement a function that takes $n$, $m$ and $k$ as parameters and then runs the following loop (a reasonable number of iterations is somewhere between 10 and 100):\n","* Produce a random graph with $n$ nodes and $m$ edges;\n","* Solve the problem for $k$ colours;\n","* Note the time it took to solve the problem; and\n","* Note whether the instance was satisfiable.\n","\n","In the end, return the average running time of the solver and the percentage of instances that were satisfiable.\n","\n","**Note.**  Measuring performance of a solver takes considerable computational time.  For example, my model answer to this exercise takes a few minutes.  This is inevitable; indeed, if the instances are too easy, the running time is dominated by model creation and other overheads; then you cannot analyse the reasoning time.  However, building a software that runs multiple experiments, performs the measurements and visuases the results usually takes multiple iterations.  To save time, use small instances and few iterations while developing your answer, and once you are happy with your implementation, change the parameter values to run the final experiment.\n","\n","### Visualisation\n","\n","Fix $n = 20$ and $m = 140$.  Run the above function for a range of values of $k$ (what is the range of meaningful values of $k$?).  Plot the average running time against $k$.  Plot the satisfiability probability against $k$.  Can you explain the results?\n","\n","To plot a simple curve, you can use the following code:\n","```\n","import matplotlib.pyplot as plt\n","plt.plot(x, y)\n","```\n","Here $x$ and $y$ are lists of $x$-values and $y$-values, respectively.\n","\n","**Note.**  You can try different values of $n$ and $m$.  Smaller $n$ will probably give very simple instances where the solution time is dominated by building the model and other overheads.  Significantly smaller or larger values of $m$ will also lead to simple instances.  \n","\n","### Variation of $m$\n","\n","Follow the above steps to plot the average running time/satisfiability probability against $m$, i.e. against the number of edges in the graph.  Fix $k$ at some reasonable value, e.g., $k = 5$."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"dgA5RSaXPum3","outputId":"20d19437-a357-40f3-b871-da92999b9c59"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA90AAAHqCAYAAAAZLi26AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACo+UlEQVR4nOzdd3hTZRsG8DtJ26Qzbelu0xaozLJBKButFlQQmSLKVFEZSkU/cSEoIA5AlKGytcgSURBBZCkCMsreo7SldED3TNvkfH+UBEJbaErSk6T377pyQU5OTp6kvXrynPd9n0ciCIIAIiIiIiIiIjI5qdgBEBEREREREdkqJt1EREREREREZsKkm4iIiIiIiMhMmHQTERERERERmQmTbiIiIiIiIiIzYdJNREREREREZCZMuomIiIiIiIjMhEk3ERERERERkZkw6SYiIiIiIiIyEybdRGQSH330ESQSidhh3FNoaChGjBghdhg1pnv37ggPDxc7DCKiKtm9ezckEgl2795t1PNKS0vx9ttvQ6VSQSqVom/fvgAAiUSCjz76yOg4li9fDolEgsOHD9933+7du6N79+76+1evXoVEIsHy5cv126zh/Gis0NBQPPXUUyY7nu5nv379+vvuO2LECISGhhpsu/tnrfsZXr161WQxisGY30WybEy6ySIsWLAAEokE7du3FzsUixMaGgqJRKK/OTs74+GHH8bKlSvFDk10upN0VW5ERFQ9J0+exIABAxASEgKFQoHAwEA89thj+Prrr6t1vAULFhgkpQ9q6dKl+PzzzzFgwACsWLECEydONNmxzWXGjBnYuHGjSY959znR3t4e9erVw7Bhw3DlyhWTvpY1MvXvHZEx7MQOgAgAYmJiEBoaioMHD+LSpUsICwsTOySL0rJlS7z55psAgOTkZCxevBjDhw+HWq3GSy+9JHJ0Zd5//3288847NfqajRs3xg8//GCwbfLkyXBxccF7771Xbv/z589DKuW1RiKiqtq3bx969OiB4OBgvPTSS/Dz80NiYiIOHDiAr776CuPHjzf6mAsWLICXl1e5mUddu3ZFYWEhHBwcjDrezp07ERgYiDlz5hhsLywshJ2deb/q/vnnn/fdp6Lz44wZMzBgwAD9qLwpTZgwAe3atUNJSQliY2Px3Xff4ffff8fJkycREBBg8terad9//z20Wu0993nh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y+0H4L7rlit67t2vk5aWhsLCwgor1tdUFfu7Y9R90VOpVOW23/meL168iOzsbPj4+JT7+ebl5d33Zztw4EBIpVL9yVoQBKxbtw69evWCm5sbgLLf0+joaCxevBheXl6IiorC/Pnzq/wFNi4uDs8//zz69++Pr7/+mu3TiMho7dq1w4YNG5CZmYmDBw9i8uTJyM3NxYABA3DmzBn9fv/++y8iIyPh7OwMd3d3eHt749133wWAaiXdD/r3726FhYX48MMPoVKpIJfL4eXlBW9vb2RlZVV4zIceesjgvouLC/z9/c3a+7lRo0Zo166dQQIYExODDh06VPmc+OGHH2L79u3YuXMnTpw4gevXr+OFF14ot9/d32F0323ufh0/Pz+4u7uXq0ESFhZW7pyi+86l+4y0Wi3mzJmDhx56yOAzP3HiRJU+c4lEgrCwMLN+5u7u7ujduzdWrVql3xYTE4PAwED9wE1lvLy88Oijj2Lt2rX6bWvWrIGdnR369eun3zZt2jRkZWWhQYMGaNasGd566y2cOHGiyjG+8MILSEtLw549exAYGGjEuyNLwaSbRLNz504kJydj9erVeOihh/S3QYMGAYDBCefZZ59Fbm4u/vjjDwBla14bNWqEFi1a6PfRarVo1qwZtm/fXuHt7lHpitYG/fPPP+jTpw8UCgUWLFiALVu2YPv27XjuuefKFdCqCl1Li+eff77SuDp16nTf43h5eSEyMhJRUVF488038eOPP2Ljxo346quv9PtUlkzdWRjtTsas561s36p8Jg/y3JpSWYwVbb8zbq1WCx8fn0p/ttOmTbvn6wYEBKBLly76k/WBAweQkJBgcDEJAL788kucOHEC7777rr6AX9OmTXHt2rX7vjd/f3907NgRW7ZsweHDh++7PxFRZRwcHNCuXTvMmDEDCxcuRElJCdatWwegbN3wo48+ips3b2L27Nn4/fffsX37dv062fu1eKrMg/z9u9v48eMxffp0DBo0CGvXrsWff/6J7du3o06dOtWOzxyGDRuGPXv24Nq1a7h8+TIOHDhQ5VFuAGjWrBkiIyPRo0cPNGvWrNLK6ZWtkTblxdkZM2YgOjoaXbt2xY8//oht27Zh+/btaNq0qcV95leuXMG+ffuQm5uL3377DUOGDKnSzLBnn30WFy5cwLFjxwCUfUd99NFH4eXlpd+na9euuHz5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g/r166N3797o16+fwc2c6tWrBy8vL1y6dKnSfSZPnozs7Gz9LTEx0awxERHd7VpmWaLqKreDu5O9yNFUj24tOpNu69O3b19s3LgRSUlJeOWVV7Bq1SqEhITgqaeewoYNG1BaWip2iERENqewWIOzyWUzbDnSTXczOul2d3fHM888g27dusHLy8tgVFmpVJojRr1r164hPT0d/v7+le4jl8vh5uZmcCMiqkkJd6znttYe17qR7utZRSjRaO+zN1kib29vREdH48SJE5g9ezb++usvDBgwAAEBAfjwww9RUMALKkREpnIyKRulWgE+rnIEultfu1AyL6MLqd3ZvutB5eXlGYxax8XF4dixY/D09ISnpyemTp2K/v37w8/PD5cvX8bbb7+NsLAwREVFmSwGIiJTi0+/VbncSqeWA4C3ixxyOynUpVokZxVZbRX22iw1NRUrVqzA8uXLER8fjwEDBmD06NG4du0aZs2ahQMHDuDPP/8UO0wiIptw53pua73gTuZjdNJtSocPH0aPHj3096OjowEAw4cPx8KFC3HixAmsWLECWVlZCAgIwOOPP46PP/6YvbqJyKLpRrpDrDhRlUolCPJwxOUb+UjIKGDSbUU2bNiAZcuWYdu2bWjSpAlee+01PP/883B3d9fv07FjRzRu3Fi8IImIbIyucjnXc1NFjE66U1NTMWnSJOzYsQNpaWnlCqrdq7L43bp3737Pgmzbtm0zNjwiItFZe7swnWBPJ33STdZj5MiRePbZZ/Hvv/+iXbt2Fe4TEBCA9957r4YjIyKyTYIg6IuotWLSTRUwOukeMWIEEhIS8MEHH8Df35/TJ4iI7qJLUq15ejlwO/7ETCbd1iQ5ORlOTvf+3XN0dMSUKVNqKCIiItuWlFWIG7lq2EklaBZo3hpXZJ2MTrr37t2Lf/75By1btjRDOERE1k0QBJtJulVsG2aVXF1dkZycDB8fH4Pt6enp8PHxMWpGGhER3d/RW6Pcjf3d4OggEzcYskhGVy9XqVQ10qObiMga3chVo6hEC6kECPSw7uql+pFuJt1WpbJztFqthoODQw1HQ0Rk+26v53YXNxCyWEaPdM+dOxfvvPMOvv32W4SGhpohJCIi66UbFQ5wd4S9zOjrmhaFvbqty7x58wAAEokEixcvhouLi/4xjUaDv//+G40aNRIrPCIim3WU67npPoxO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\n"},"metadata":{}}],"source":["# Your solution to Exercise 5\n","\n","from ortools.sat.python import cp_model\n","\n","def graph_coloring_solver(n, edges, k):\n","    \"\"\"Solve the graph coloring problem for a given graph and number of colors.\"\"\"\n","    model = cp_model.CpModel()\n","\n","    # Create variables: one for each node, representing its color\n","    colors = [model.NewIntVar(1, k, f'color_{i}') for i in range(n)]\n","\n","    # Add constraints: adjacent nodes must have different colors\n","    for (u, v) in edges:\n","        model.Add(colors[u] != colors[v])\n","\n","    # Solve the model\n","    solver = cp_model.CpSolver()\n","    status = solver.Solve(model)\n","\n","    # Return True if the graph can be colored with k colors, False otherwise\n","    return status in [cp_model.FEASIBLE, cp_model.OPTIMAL]\n","\n","import random\n","\n","def generate_random_graph(n, m):\n","    \"\"\"Generate a random graph with n nodes and m edges.\"\"\"\n","    edges = set()\n","    while len(edges) < m:\n","        u, v = random.sample(range(n), 2)  # Pick two distinct nodes\n","        if u != v:\n","            edges.add((min(u, v), max(u, v)))  # Avoid duplicate or reversed edges\n","    return list(edges)\n","\n","import time\n","\n","def measure_performance(n, m, k, iterations=10):\n","    \"\"\"Measure solver performance and satisfiability probability.\"\"\"\n","    total_time = 0\n","    satisfiable_count = 0\n","\n","    for _ in range(iterations):\n","        # Generate a random graph\n","        edges = generate_random_graph(n, m)\n","\n","        # Measure time to solve\n","        start_time = time.time()\n","        is_satisfiable = graph_coloring_solver(n, edges, k)\n","        elapsed_time = time.time() - start_time\n","\n","        total_time += elapsed_time\n","        if is_satisfiable:\n","            satisfiable_count += 1\n","\n","    # Average time and satisfiability probability\n","    avg_time = total_time / iterations\n","    satisfiability_prob = satisfiable_count / iterations\n","\n","    return avg_time, satisfiability_prob\n","\n","import matplotlib.pyplot as plt\n","\n","def analyze_k(n, m, k_range, iterations=10):\n","    \"\"\"Analyze performance and satisfiability probability for varying k.\"\"\"\n","    avg_times = []\n","    satisfiability_probs = []\n","\n","    for k in k_range:\n","        avg_time, satisfiability_prob = measure_performance(n, m, k, iterations)\n","        avg_times.append(avg_time)\n","        satisfiability_probs.append(satisfiability_prob)\n","\n","    # Plot results\n","    plt.figure(figsize=(10, 5))\n","\n","    # Plot average running time\n","    plt.subplot(1, 2, 1)\n","    plt.plot(k_range, avg_times, marker='o')\n","    plt.title(\"Average Running Time vs k\")\n","    plt.xlabel(\"Number of Colors (k)\")\n","    plt.ylabel(\"Average Running Time (s)\")\n","\n","    # Plot satisfiability probability\n","    plt.subplot(1, 2, 2)\n","    plt.plot(k_range, satisfiability_probs, marker='o')\n","    plt.title(\"Satisfiability Probability vs k\")\n","    plt.xlabel(\"Number of Colors (k)\")\n","    plt.ylabel(\"Satisfiability Probability\")\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","def analyze_m(n, m_range, k, iterations=10):\n","    \"\"\"Analyze performance and satisfiability probability for varying m.\"\"\"\n","    avg_times = []\n","    satisfiability_probs = []\n","\n","    for m in m_range:\n","        avg_time, satisfiability_prob = measure_performance(n, m, k, iterations)\n","        avg_times.append(avg_time)\n","        satisfiability_probs.append(satisfiability_prob)\n","\n","    # Plot results\n","    plt.figure(figsize=(10, 5))\n","\n","    # Plot average running time\n","    plt.subplot(1, 2, 1)\n","    plt.plot(m_range, avg_times, marker='o')\n","    plt.title(\"Average Running Time vs m\")\n","    plt.xlabel(\"Number of Edges (m)\")\n","    plt.ylabel(\"Average Running Time (s)\")\n","\n","    # Plot satisfiability probability\n","    plt.subplot(1, 2, 2)\n","    plt.plot(m_range, satisfiability_probs, marker='o')\n","    plt.title(\"Satisfiability Probability vs m\")\n","    plt.xlabel(\"Number of Edges (m)\")\n","    plt.ylabel(\"Satisfiability Probability\")\n","\n","    plt.tight_layout()\n","    plt.show()\n","\n","\n","\n","analyze_k(n=20, m=140, k_range=range(2, 11), iterations=10)\n","\n","analyze_m(n=20, m_range=range(50, 201, 10), k=10, iterations=10)\n","\n","\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"1Hv5Ky3aXTNrZhBRiokBtGV29z3mS7_z2","timestamp":1732048368157}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}