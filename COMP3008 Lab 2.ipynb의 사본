{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1T6t6JsBjkL_9kpI9pgL82JLHibSlNefH","timestamp":1728396493040}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Lab 2: Z3 and Python\n","\n","In Lab 1, you have seen that Z3 can magically solve mathematical problems, and you do not need to think about algorithms.  All you have to do is to formulate the requirements in a declarative language.  However you might have noticed that the SMT2 language (that language used by Z3) is not particularly user-friendly.\n","\n","Today, you will learn how to use Z3 from a Python program (without the SMT2 language).  The skill you will acquire is not just about this specific combination (Z3 and Python); it is about the concept of using a general-purpose solver such as Z3 from a general-purpose programming language such as Python.\n","\n","Why Python?  While relatively slow, it is concise and flexible which makes it ideal for working with external libraries.  It is a popular choice in applications of machine learning and other AI tools.\n","\n","Some of you might not have experience in Python.  This is OK; knowing how to write programs in any procedural language such as Java and some minimal understanding of the Python syntax will be sufficient for the labs/coursework.  Also, learning a bit of Python along the way will certainly be good for your studies and career."],"metadata":{"id":"MC9IZuKaCuxP"}},{"cell_type":"markdown","source":["Before proceeding, please run the following command to install the `z3-solver` package:"],"metadata":{"id":"rTGKxIVPHY6F"}},{"cell_type":"code","source":["!pip install z3-solver"],"metadata":{"id":"pe8HcUZZHXFX","executionInfo":{"status":"ok","timestamp":1728548559750,"user_tz":-60,"elapsed":7481,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"b3de8261-5db0-43f8-cc1a-5a80df579f50","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting z3-solver\n","  Downloading z3_solver-4.13.2.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (602 bytes)\n","Downloading z3_solver-4.13.2.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (28.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m28.1/28.1 MB\u001b[0m \u001b[31m38.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: z3-solver\n","Successfully installed z3-solver-4.13.2.0\n"]}]},{"cell_type":"markdown","source":["Below is an example of a Python program that encodes a single rule $A \\land \\lnot B$ and calls Z3 to find the values of $A$ and $B$ that satisfy the rule."],"metadata":{"id":"Jxt7DvncEybw"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"fd4cyspUCr3l","executionInfo":{"status":"ok","timestamp":1728379369982,"user_tz":-60,"elapsed":316,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"753e1bb6-9061-4646-d4f7-1186bdac433f","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["A = True\n","B = False\n"]}],"source":["import z3\n","\n","s = z3.Solver()\n","\n","A = z3.Bool('A')\n","B = z3.Bool('B')\n","s.add(z3.And(A, z3.Not(B)))\n","\n","if s.check() == z3.unsat:\n","    print('unsat')\n","else:\n","    print(f'A = {s.model().eval(A)}')\n","    print(f'B = {s.model().eval(B)}')"]},{"cell_type":"markdown","source":["Read it carefully.  Note how Boolean constants are defined.  The `add` function is equivalent of `assert` in the Z3 language; it adds an expression to the knowledge base.  Functions `Not`, `And`, etc. are provided by the Z3 library to encode logical expressions.  Function `s.check()` executes the reasoning algorithm of Z3.  The result of the function is `sat` if the knowledge base is satisfiable and `unsat` if it is not.\n","It can also be `unknown` but this is unlikely to happen with simple examples.  The `s.model().eval` function gives you access to the model found by Z3; it returns the value of the given constant."],"metadata":{"id":"8GY8Ap44IOIO"}},{"cell_type":"markdown","source":["## Exercises\n","\n","1. \tUse the above approach to check satisfiability of the following formula:\n","\t$$\n","\t((A \\land \\lnot B) \\lor (\\lnot A \\land B)) \\land (A \\leftrightarrow B) \\land \\lnot (C \\leftrightarrow B)\n","\t$$"],"metadata":{"id":"kvcORLXfJUTI"}},{"cell_type":"code","source":["# Your solution to exercise 1\n","\n","import z3\n","\n","s = z3.Solver()\n","\n","A = z3.Bool('A')\n","B = z3.Bool('B')\n","C = z3.Bool('C')\n","s.add(\n","    z3.And(\n","        z3.And(\n","            z3.Or(\n","                z3.And(A, z3.Not(B)),\n","                z3.And(z3.Not(A), B)\n","            ),\n","            (A == B)\n","        ),\n","        z3.Not(\n","            (C == B)\n","        )\n","    )\n",")\n","\n","if s.check() == z3.unsat:\n","    print('unsat')\n","else:\n","    print(f'A = {s.model().eval(A)}')\n","    print(f'B = {s.model().eval(B)}')\n","    print(f'C = {s.model().eval(C)}')\n","\n"],"metadata":{"id":"H1-acQOBKWaw","executionInfo":{"status":"ok","timestamp":1728380120769,"user_tz":-60,"elapsed":331,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"9aae6a08-ccbb-4f90-f612-c5707cdafea6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["unsat\n"]}]},{"cell_type":"markdown","source":["2.  Encode your solution to the last exercise from Lab 1.  To create an integer constant, you will need function `z3.Int` instead of `z3.Bool`.  You can use operators such as `>=`, `+`, etc. to compose Z3 expressions.  All the Z3 library functions are [described here](https://z3prover.github.io/api/html/namespacez3py.html#func-members)."],"metadata":{"id":"y68dJEKHJX3J"}},{"cell_type":"code","source":["# Your solution to exercise 2\n","\n","import z3\n","\n","s = z3.Solver()\n","\n","A = z3.Int('A')\n","B = z3.Int('B')\n","C = z3.Int('C')\n","X = z3.Int('X')\n","Y = z3.Int('Y')\n","\n","s.add(z3.And(A > 0, C < 8))\n","s.add(z3.And(A < B, B < C))\n","s.add(z3.And(A == 2 * X, B == 2 * Y))\n","s.add(C == A + B)\n","\n","if s.check() == z3.unsat:\n","    print('unsat')\n","else:\n","    print(f'A = {s.model().eval(A)}')\n","    print(f'B = {s.model().eval(B)}')\n","    print(f'C = {s.model().eval(C)}')\n","\n"],"metadata":{"id":"5S8akDQLPZQT","executionInfo":{"status":"ok","timestamp":1728380551857,"user_tz":-60,"elapsed":5,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"de07f15e-288b-4954-ac8c-b66f65976f5d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["A = 2\n","B = 4\n","C = 6\n"]}]},{"cell_type":"markdown","source":["3.  Study the following Python script.  At what point does the program calculate $x + y$ and compare it to 4?  What exactly happens in line `s.add(x + y >= 4)`?  **It is crucial that you correctly understand the answer.**"],"metadata":{"id":"NmmHMzIFJj9z"}},{"cell_type":"code","source":["import z3\n","\n","s = z3.Solver()\n","x = z3.Int('x')\n","y = z3.Int('y')\n","s.add(x + y >= 4)\n","if s.check() == z3.unsat:\n","    print('unsat')\n","else:\n","    print(f'x = {s.model().eval(x)}')\n","    print(f'y = {s.model().eval(y)}')"],"metadata":{"id":"SoLnz9hLN0Oc","executionInfo":{"status":"ok","timestamp":1728549061455,"user_tz":-60,"elapsed":274,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"43fe0524-4169-4c81-866f-bce72f666bfc","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x = 4\n","y = 0\n"]}]},{"cell_type":"markdown","source":["4. A disc jockey (DJ) composes a playlist of 30 tracks. \tThe playlist consists of 'slow blocks', i.e. blocks of slow tracks, and 'fast blocks', i.e. blocks of fast tracks. \tThe fast and slow blocks alternate.  The DJ wants to follow several rules:\n"," 1. The slow block cannot include more than two tracks.\n"," 2. The fast block has to include at least three tracks.\n"," 3. Tracks 1, 8, 15, 22, ... have to be slow.  (Assume indexing from 1.)\n"," 4. Tracks 6, 11, 16, 21, ... have to be fast.\n","\n"," Write a Python script that finds the desired structure of the playlist using Z3.  You are expected to use an array of Boolean constants; please don't create 30 variables by hand!  Then use loops to encode the rules and print the solution.\n","\n"," Hints:\n"," * You can use conditions such as 'if the $i$th track is slow and the $i+1$th track is slow then...'\n"," * It might help you a lot to write down those conditions on a piece of paper before encoding them in Python.\n"," * You will create such conditions for each $i$.\n"," * A condition can be encoded using implication."],"metadata":{"id":"NAuG6g3zJolA"}},{"cell_type":"code","source":["from z3 import *\n","\n","n_tracks = 30\n","\n","tracks = [Bool(f\"track_{i}\") for i in range(n_tracks)]\n","\n","solver = Solver()\n","\n","# Rule: Tracks 0, 7, 14, 21,.. must be slow (True)\n","for i in range(0, n_tracks, 7):\n","    solver.add(tracks[i] == True)\n","\n","# Rule: Tracks 5, 10, 15, 20,... must be fast (False)\n","for i in range(5, n_tracks, 5):\n","    solver.add(tracks[i] == False)\n","\n","# Ensure no more than two consecutive slow tracks (T, T, F)\n","for i in range(n_tracks - 2):\n","    solver.add(Implies(And(tracks[i], tracks[i + 1] == True), tracks[i + 2] == False))\n","\n","# Ensure at least three consecutive fast tracks (F, F, F)\n","solver.add(Implies(tracks[0] == False, And(tracks[1] == False, tracks[2] == False)))\n","solver.add(Implies(tracks[1] == False, Or(And(tracks[0] == False, tracks[2] == False), And(tracks[2] == False, tracks[3] == False))))\n","solver.add(Implies(tracks[n_tracks-2] == False, Or(And(tracks[n_tracks-1] == False, tracks[n_tracks-3] == False), And(tracks[n_tracks-3] == False, tracks[n_tracks-4] == False))))\n","solver.add(Implies(tracks[n_tracks-1] == False, And(tracks[n_tracks-2] == False, tracks[n_tracks-3] == False)))\n","for i in range(2, n_tracks - 2):\n","    solver.add(Implies(tracks[i] == False, Or([\n","        And(tracks[i-2] == False, tracks[i-1] == False),\n","        And(tracks[i-1] == False, tracks[i+1] == False),\n","        And(tracks[i+1] == False, tracks[i+2] == False),\n","    ])))\n","\n","\n","# Check if the constraints are satisfiable\n","if solver.check() == sat:\n","    # Get the model (solution)\n","    model = solver.model()\n","\n","    # Print the playlist structure (Slow = S, Fast = F)\n","    playlist_structure = ['S' if model[tracks[i]] else 'F' for i in range(n_tracks)]\n","    print(\"Playlist Structure:\", playlist_structure)\n","else:\n","    print(\"No solution found.\")\n"],"metadata":{"id":"sWchjK-iPTD0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728552054943,"user_tz":-60,"elapsed":263,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"a5845624-2756-469c-cc64-ff338dd69f43"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Playlist Structure: ['S', 'F', 'F', 'F', 'F', 'F', 'F', 'S', 'F', 'F', 'F', 'F', 'F', 'F', 'S', 'F', 'F', 'F', 'F', 'F', 'F', 'S', 'F', 'F', 'F', 'F', 'F', 'F', 'S', 'S']\n"]}]}]}