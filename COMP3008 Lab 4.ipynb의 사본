{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yZXgMrP2xCzD1YnK3X-gKyl-0R_fcNxF","timestamp":1729525499521}],"collapsed_sections":["fBf78JqIRq7N"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"KL0lcKoPB0X1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729766028495,"user_tz":-60,"elapsed":12314,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"05728943-30ca-4b7f-db35-b85fd2827b47"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: z3-solver in /usr/local/lib/python3.10/dist-packages (4.13.3.0)\n"]}],"source":["!pip install z3-solver"]},{"cell_type":"markdown","source":["# Lab 4: Latin Square Problem in Z3\n","\n","You have two weeks to work on this worksheet; there will be no new worksheet next week.\n","\n","In this lab, you will use Z3 to solve the Latin square problem.  The problem was discussed at the end of Lecture 2.  You can also find a full description of it below.\n","\n","Latin square is a square matrix $M_{ij}$ of size $n \\times n$ filled with elements $\\{ 1, 2, \\ldots, n \\}$ such that each of them occurs exactly once in each row and column of $M_{ij}$.\n","\n","A couple of examples of Latin squares of size $3 \\times 3$:\n","\n","$$\n","\\begin{array}{ccc}\n","3 & 1 & 2\\\\\n","2 & 3 & 1\\\\\n","1 & 2 & 3\\\\\n","\\end{array}\n","$$\n","\n","$$\n","\\begin{array}{ccc}\n","1 & 3 & 2\\\\\n","3 & 2 & 1\\\\\n","2 & 1 & 3\\\\\n","\\end{array}\n","$$\n","\n","\n","You can also check the Wikipedia page: https://en.wikipedia.org/wiki/Latin_square\n","\n","The associated problem is as follows.\n","You are given only some of the values in $M_{ij}$, and you are asked to fill in the rest of the values to satisfy the Latin square rules, or prove that no such values exist.\n","\n","Examples of the Latin Square Problem instances.\n","\n","* Satisfiable:\n","$$\n","\\begin{array}{ccc}\n","? & 2 & ?\\\\\n","1 & 3 & ?\\\\\n","? & ? & 3\\\\\n","\\end{array}\n","$$\n","* Unsatisfiable:\n","$$\n","\\begin{array}{ccc}\n","? & ? & 1\\\\\n","2 & ? & ?\\\\\n","? & ? & 3\\\\\n","\\end{array}\n","$$\n","\n","<br/><br/>\n","\n","First, let us define the Latin Square formally, with all the notations needed to describe the input data.\n","\n","> _Definition_. Let $n$ be a positive integer.\n","Let $V$ be a set of tuples $(i, j, t)$ of integers, $1 \\le i, j, t \\le n$.\n","Then the Latin Square Problem is to find a matrix $M$ of size $n \\times n$ such that each element of the matrix is an integer between 1 and $n$, there are no repeating elements in any row or column of the matrix, and $M_{i,j} = t$ for every $(i, j, t) \\in V$.\n","\n","## Latin Square Problem formulation\n","\n","Now we can _formulate_ the problem in FOL.  A _formulation_ of a problem is a set of formulas that describe the problem for an arbitrary input (in our case, arbitrary values of $n$ and $V$).\n","In order to compose a problem formulation, we need to decide on the solution representation.  The Latin Square Problem seeks a combination of values in matrix $M$.  For the first few exercises, we will use FOL function $\\text{tile}(x, y)$ to represent $M_{y, x}$.  Having a solution representation, it is easy to formulate the Latin square rules:\n","$$\n","\\begin{split}\n","& \\forall x . \\forall y_1 . \\forall y_2 . (y_1 \\neq y_2) \\rightarrow (\\text{tile}(x, y_1) \\neq \\text{tile}(x, y_2)), \\qquad & (1) \\\\\n","& \\forall y . \\forall x_1 . \\forall x_2 . (x_1 \\neq x_2) \\rightarrow (\\text{tile}(x_1, y) \\neq \\text{tile}(x_2, y)), \\qquad & (2) \\\\\n","& \\text{tile}(x, y) = t \\qquad \\forall (x, y, t) \\in V, \\qquad & (3) \\\\\n","& \\mathcal{D} = \\{ 1, 2, \\ldots, n \\} . \\qquad & (4)\n","\\end{split}\n","$$\n","\n","Observe that equations (1)&ndash;(3) accurately describe our knowledge in FOL in the assumption that $n$ is the size of the domain of discourse, whereas equation (4) restricts the domain of discorse and thus is not FOL.  Strictly speaking, (4) is not even an FOL formula and should not be a part of the formulation, however, without (4), the domain of discourse would be unrestricted in any way.\n","\n","How can we impose (4) in Z3?  There exist two simple approaches:\n","1. Unlike FOL, Z3 assigns a type to each variable, parameter and function.  We can define a new type that has exactly $n$ values, and use it for all our functions and variables.  You already have experience of defining such a datatype (recall the Blocks exercise in Lab&nbsp;3).\n","\n","1. We can also use integers for all our variables and functions.  However, just using integers would make the domain of discourse infinitely large.  Thus, we have to state that the rules only apply when the variable values are between 1 and $n$, and that $1 \\le \\text{tile}(x, y) \\le n$ for all $x$ and $y$.  For example, we can update (1) with\n"," \\begin{multline*}\n"," \\forall x . \\forall y_1 . \\forall y_2 . (x \\ge 1) \\land (x \\le 3) \\\\\n"," \\land (y_1 \\ge 1) \\land (y_1 \\le 3) \\land (y_2 \\ge 1) \\land (y_2 \\le 3) \\\\\n"," \\land (y_1 \\neq y_2) \\rightarrow \\text{tile}(x, y_1) \\neq \\text{tile}(x, y_2)\n"," \\end{multline*}\n","\n","Neither of the two approaches are pure FOL solutions (why not?); we slightly bend the rules here to conveniently specify the size of the Latin Square.\n","\n","\n","## Latin Square Problem Solver\n","\n","Having a formulation, we can develop a Z3-based solver for the Latin Square Problem:\n","1. Given $n$ and $V$, encode the formulation (1)&ndash;(4) in Z3.\n","\n","1. Run the solver.\n","\n","1. If the program is unsatisfiable, print \"No solution exists\" and exit.\n","\n","1. Otherwise, print a matrix of size $n \\times n$ such that element in row $i$ and column $j$ is the value of $\\text{tile}(i, j)$ in the interpretation found by Z3.\n","\n","Note that we do not describe the algorithm to solve the Latin square problem; we use the declarative approach where we only describe the rules of the problem but leave the solution process to the reasoning software.  Much of this module will be dedicated to producing such knowledge bases and using them with off-the-shelf solvers (Z3 and later OR-Tools).\n"],"metadata":{"id":"dHEqS8V6B20H"}},{"cell_type":"markdown","source":["## Latin Square Problem formulation 1\n","\n"],"metadata":{"id":"69YrwdoED_ZS"}},{"cell_type":"markdown","source":["## Part 1 Exercises"],"metadata":{"id":"StXsLPOvD4iV"}},{"cell_type":"markdown","source":["### Exercise 1\n","\n","Your task is to implement a solver (in Python) using the first workaround, i.e. restricting the domain of discourse.\n","\n","Hints:\n","1. To begin with, assume $n = 3$.  Generalise it for an arbitrary $n$ later.\n","1. The model will tell you the matrix values, however they will be hard to read.  Instead, you can use the `eval` function within your Python code, e.g.\n","```\n","s.model().eval(myfunction(1, 1))\n","```\n","will print out the value of function `myfunction` with parameter values 1 and 1.\n","1. To learn how to create a new Z3 datatype in Python, study the following example.\n","\n"],"metadata":{"id":"8gA5APlEGM9R"}},{"cell_type":"code","source":["# Example of creating a user-defined Z3 datatype in Python\n","\n","from z3 import *\n","\n","s = Solver()\n","\n","myDatatype = z3.Datatype('MyDatatype')\n","myDatatype.declare('A')\n","myDatatype.declare('B')\n","myDatatype.declare('T')\n","myDatatype = myDatatype.create()\n","\n","x = z3.Const('x', myDatatype)\n","y = z3.Const('y', myDatatype)\n","\n","s.add(x != y)\n","s.add(x == myDatatype.B)\n","\n","# Equivalent to s.add(z3.Or(y == myDatatype.B, y == myDatatype.C)).\n","# Equivalent to s.add(z3.Or(y == myDatatype.constructor(1)(), y == myDatatype.constructor(2)())).\n","s.add(z3.Or(*[y == myDatatype.constructor(i)() for i in range(1, 3)]))\n","\n","if s.check() == unsat:\n","    print(\"unsat\")\n","else:\n","    print(f'x = {s.model().eval(x)}')\n","    print(f'y = {s.model().eval(y)}')\n"],"metadata":{"id":"tDYY3QlYaHx5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729757705670,"user_tz":-60,"elapsed":321,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"6526d11b-093a-428c-e62d-02deafb32010"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x = B\n","y = T\n"]}]},{"cell_type":"code","source":["# Solution to exercise 1\n","\n","from z3 import *\n","\n","s = Solver()\n","\n","n = 3\n","\n","myDatatype = z3.Datatype('Tile')\n","for i in range(1, n+1):\n","    myDatatype.declare(str(i))\n","myDatatype = myDatatype.create()\n","\n","x = z3.Const('x', myDatatype)\n","x1 = z3.Const('x1', myDatatype)\n","x2 = z3.Const('x2', myDatatype)\n","y = z3.Const('y', myDatatype)\n","y1 = z3.Const('y1', myDatatype)\n","y2 = z3.Const('y2', myDatatype)\n","t = z3.Const('t', myDatatype)\n","\n","data = [myDatatype.constructor(i)() for i in range(3)]\n","\n","Tile = z3.Function('tile', myDatatype, myDatatype, myDatatype)\n","\n","s.add(ForAll([x, y1, y2], Implies(y1 != y2, Tile(x, y1) != Tile(x, y2))))\n","\n","s.add(ForAll([y, x1, x2], z3.Implies(x1 != x2, Tile(x1, y) != Tile(x2, y))))\n","\n","# satisfiable\n","s.add(Tile(data[0], data[1]) == data[0])\n","s.add(Tile(data[1], data[0]) == data[1])\n","s.add(Tile(data[1], data[1]) == data[2])\n","s.add(Tile(data[2], data[2]) == data[2])\n","\n","# unsatisfiable\n","# s.add(Tile(data[0], data[2]) == data[0])\n","# s.add(Tile(data[1], data[0]) == data[1])\n","# s.add(Tile(data[2], data[2]) == data[2])\n","\n","if s.check() == unsat:\n","    print(\"No solution exists\")\n","else:\n","    for i in range(n):\n","        for j in range(n):\n","            print(f'{s.model().eval(Tile(data[i], data[j]))}', end=\" \")\n","        print()\n","\n","\n","\n"],"metadata":{"id":"srwM1spRHS8w","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729761040443,"user_tz":-60,"elapsed":311,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"c23d2017-64a4-407c-cfbd-b90d8b8caec0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 1 2 \n","2 3 1 \n","1 2 3 \n"]}]},{"cell_type":"markdown","source":["Test your solver on satisfiable and unsatisfiable instances."],"metadata":{"id":"jyBzLoimHfFM"}},{"cell_type":"markdown","source":["### Exercise 2\n","\n","Now produce an alternative solution that would use the second work-around, i.e. would use integers while restricting the domain of application of the for-all quantifiers.\n","\n","Question: how does Z3 define the `tile` function for column and row indices outside the $[1,3]$ range in its model?"],"metadata":{"id":"aR8z9PW0HcBc"}},{"cell_type":"code","source":["# Solution to exercise 2\n","\n","from z3 import *\n","\n","s = Solver()\n","\n","x = Int('x')\n","x1 = Int('x1')\n","x2 = Int('x2')\n","y = Int('y')\n","y1 = Int('y1')\n","y2 = Int('y2')\n","t = Int('t')\n","\n","Tile = z3.Function('tile', z3.IntSort(), z3.IntSort(), z3.IntSort())\n","\n","s.add(ForAll([x, y1, y2], z3.Implies(z3.And(1 <= x, x <= 3, 1 <= y1, y1 <= 3, 1 <= y2, y2 <= 3, y1 != y2), Tile(x, y1) != Tile(x, y2))))\n","\n","s.add(ForAll([y, x1, x2], z3.Implies(z3.And(1 <= y, y <= 3, 1 <= x1, x1 <= 3, 1 <= x2, x2 <= 3,x1 != x2), Tile(x1, y) != Tile(x2, y))))\n","\n","s.add(ForAll([x, y, t], z3.Implies(z3.And(1 <= x, x <= 3, 1 <= y, y <= 3), z3.And(1 <= Tile(x, y), Tile(x, y) <= 3))))\n","\n","\n","# satisfiable\n","s.add(Tile(1, 2) == 1)\n","s.add(Tile(2, 1) == 2)\n","s.add(Tile(2, 2) == 3)\n","s.add(Tile(3, 3) == 3)\n","\n","# unsatisfiable\n","# s.add(Tile(1, 2) == 2)\n","# s.add(Tile(3, 1) == 1)\n","# s.add(Tile(3, 3) == 3)\n","\n","if s.check() == unsat:\n","    print(\"No solution exists\")\n","else:\n","    for i in range(n):\n","        for j in range(n):\n","            print(f'{s.model().eval(Tile(i+1, j+1))}', end=\" \")\n","        print()\n","\n","\n","\n","\n","\n"],"metadata":{"id":"tPxX3GNTILVa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729762387082,"user_tz":-60,"elapsed":320,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"c7ef8a25-3252-47fb-f77f-0a46647e0499"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3 1 2 \n","2 3 1 \n","1 2 3 \n"]}]},{"cell_type":"markdown","source":["### Exercise 3\n","Which of the two solvers is faster?  To answer this question, increase $n$.  Also play with various fixed values in the matrix; what makes the instances computationally hard (i.e. significantly slows does the Z3 solver)?"],"metadata":{"id":"Mj-B9MwDIRb1"}},{"cell_type":"markdown","source":["Your answer to exercise 3:"],"metadata":{"id":"Wo6qv3SYLrfz"}},{"cell_type":"markdown","source":["## Explicit enumeration of constraints\n","\n","In Exercise 3, you observed that even relatively small changes to the formulation may have considerable effect on the performance of Z3.  It is hard to pinpoint what exactly makes Z3 slower or faster; the solver is too complex to identify the bottleneck without thorough research.  However, it is often relatively easy to restructure the knowledge base and test if the new structure leads to better solution times.  Practitioners would usually try several knowledge base structures and choose the most effective one by trial and error.\n","\n","In this exercise you will use a different formulation of the Latin Square Problem to build a new solver.\n","\n","### New formulation of the Latin Square Problem\n","\n","The the Latin Square Problem can be formulated as follows.\n","\n","Let $N = \\{ 1, 2, \\ldots, n \\}$ &ndash; we introduce this set for convenience.  Our solution representation here will be a set of constants (functions of arity zero) $m_{i,j}$ for $i, j \\in N$.  Specifically, $m_{i,j}$ will be the value of tile at coordinates $(i, j)$.  Then the Latin Square Problem can be formulated as follows.\n","$$\n","\\begin{split}\n","& m_{i,j} \\neq m_{k,j} \\qquad & \\forall i < k \\in N,\\ \\forall j \\in N, \\qquad & (5)\\\\\n","& m_{i,j} \\neq m_{i,k} & \\forall i \\in N,\\ \\forall j < k \\in N, \\qquad & (6)\\\\\n","& m_{i,j} = t & \\forall (i, j, t) \\in V, \\qquad & (7)\\\\\n","& \\mathcal{D} = N & \\forall i, j \\in N. \\qquad & (8)\n","\\end{split}\n","$$\n","\n","Equations (5) and (6) define the Latin square rules: no two elements in a row/column can be the same.  The known values in the matrix are fixed by (7).  Equation (8) restricts the domain of discourse as otherwise the tile values would be unbound.\n","\n","### Discussion of the new formulation\n","\n","Unlike the formulation (1)&ndash;(4), formulation (5)&ndash;(8) uses individual constants for each tile.  This increases the number of sentences in our knowledge base, however it is still of finite size.  Indeed, each index on the right of this formulation can only take a finite number of values.  Thus, we can explicitly enumerate all possible combinations of indices instead of using quantifiers.  For example, for $n = 3$, (5) expands as\n","$$\n","\\begin{split}\n","& m_{1,1} \\neq m_{2,1}\\\\\n","& m_{1,1} \\neq m_{3,1}\\\\\n","& m_{2,1} \\neq m_{3,1}\\\\\n","& m_{1,2} \\neq m_{2,2}\\\\\n","& m_{1,2} \\neq m_{3,2}\\\\\n","& m_{2,2} \\neq m_{3,2}\\\\\n","& m_{1,3} \\neq m_{2,3}\\\\\n","& m_{1,3} \\neq m_{3,3}\\\\\n","& m_{2,3} \\neq m_{3,3}\n","\\end{split}\n","$$\n","\n","The expanded formulation consists of many sentences; $O(n^3)$ sentences to be precise.\n","However, this does not make it inefficient; packages such as Z3 can handle large formulations, and languages such as Python allow creating and feeding such formulations to Z3."],"metadata":{"id":"hT4KS7jpRBzM"}},{"cell_type":"markdown","source":["## Part 2 Exercises"],"metadata":{"id":"X5pIc5WORlPB"}},{"cell_type":"markdown","source":["### Exercise 4\n","\n","Study the discussion in the Explicit Enumeration of Constraints section and the new formulation of the Latin Square problem.\n","Pay attention to how the formulation is described:\n","* Auxiliary notation $N$ is defined above the formulas;\n","* Each group of rules is defined in a separate line;\n","* Groups of rules can be parametrised, with the domain of each parameter being defined on the right; for example, in (5), we specify that the rule is defined for every combination of $i \\in N$, $j \\in N$ and $k \\in N$ such that $i < k$;\n","* Formula indices are given in brackets, for later references (include the index even if you never reference this specific formula);\n","* Each line of the formulation is explained below the formal formulation;\n","* To refer to the formulation, we give the range of formula indices, e.g., \"formulation&nbsp;(5)&ndash;(8)\".\n","\n","In your coursework projects, you will need to define formulations in this style."],"metadata":{"id":"fBf78JqIRq7N"}},{"cell_type":"markdown","source":[],"metadata":{"id":"9nEBxq-A461L"}},{"cell_type":"markdown","source":[],"metadata":{"id":"_F7eprvk46ko"}},{"cell_type":"markdown","source":["### Exercise 5\n","\n","Write a Python program that encodes the formulation (5)&ndash;(8) and solves it using Z3.  (Do not use SMT2; your solution would not be generic enough.)\n","\n","You may use your own data type for the elements of $M$ or you may use integers, in which case you would need the restrict their values.\n","\n","Separate the problem input from the solution method.  Below is a template that will help you in that."],"metadata":{"id":"UuJFAVlvRuar"}},{"cell_type":"code","source":["# Solution to exercise 5\n","from z3 import *\n","\n","def solve_latin_square(n, V):\n","\n","    solver = z3.Solver()\n","\n","    # Your code here\n","    myDatatype = z3.Datatype('M')\n","    for i in range(1, n+1):\n","        myDatatype.declare(str(i))\n","    myDatatype = myDatatype.create()\n","\n","    data = [myDatatype.constructor(i)() for i in range(n)]\n","\n","    m = z3.Function('m', myDatatype, myDatatype, myDatatype)\n","\n","    for x in range(n-1):\n","      for y in range(x+1, n):\n","        for l in range(n):\n","          solver.add(m(data[x], data[l]) != m(data[y], data[l]))\n","          solver.add(m(data[l], data[x]) != m(data[l], data[y]))\n","\n","    for (x, y, t) in V:\n","        solver.add(m(data[x-1], data[y-1]) == data[t-1])\n","\n","    if solver.check() == unsat:\n","        print(\"No solution exists\")\n","    else:\n","        for i in range(n):\n","            for j in range(n):\n","                print(f'{solver.model().eval(m(data[i], data[j]))}', end=\" \")\n","            print()\n","\n","solve_latin_square(10, [(1, 1, 2), (2, 2, 3)])"],"metadata":{"id":"2MP-Dx4PRwSb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1729768920452,"user_tz":-60,"elapsed":5317,"user":{"displayName":"Myungsoo Son","userId":"01625610565406813433"}},"outputId":"76100a1e-cd62-4319-d222-7e21c9b15110"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 8 9 6 3 10 4 7 1 5 \n","1 3 2 9 7 4 6 10 5 8 \n","8 4 6 3 10 1 7 5 2 9 \n","10 1 5 8 2 7 3 6 9 4 \n","3 5 7 10 4 9 2 8 6 1 \n","9 7 10 1 6 5 8 4 3 2 \n","4 2 1 7 5 6 9 3 8 10 \n","5 6 4 2 8 3 1 9 10 7 \n","6 10 8 4 9 2 5 1 7 3 \n","7 9 3 5 1 8 10 2 4 6 \n"]}]},{"cell_type":"markdown","source":["### Exercise 6\n","\n","Compare the solution times for all the formulations that you used.  Which approach is faster?  Use identical instance data to compare the methods.\n"],"metadata":{"id":"BEOJItGaRyf-"}},{"cell_type":"markdown","source":["Your answer to exercise 6."],"metadata":{"id":"nfPBEIhhR0yn"}}]}